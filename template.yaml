AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  # =========================================================================================
  # IAM ROLE, POLICY
  # =========================================================================================
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: worldquant-brain-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - logs.amazonaws.com
                - sqs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  IamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: worldquant-brain-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ParameterStoreAccess
            Effect: Allow
            Action:
            - ssm:GetParameter*
            - ssm:GetParametersByPath
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:worldquant
          - Sid: LogsAccess
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:CreateLogStream
              - logs:DeleteLogStream
              - logs:PutLogEvents
              - logs:DeleteRetentionPolicy
            Resource: arn:aws:logs:*:*:*:*:*
          - Sid: LambdaAccess
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:GetFunctionConfiguration
            Resource: arn:aws:lambda:*:*:*:*:*
          - Sid: SQSAccess
            Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:WorldQuant*
          - Sid: CloudWatchAccess
            Effect: Allow
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DeleteAlarms
            Resource: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:worldquant*       
      Roles:
        - !Ref IamRole

  # =========================================================================================
  # Logs
  # =========================================================================================
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: WorldQuant-Brain-Log-Group

  LogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup

  # =========================================================================================
  # AWS LAMBDA FUNCTIONS
  # ========================================================================================= 
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WorldQuant-Brain-Auth-Function
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: authenticate/
      MemorySize: 128
      Timeout: 900
      Role: !GetAtt IamRole.Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
          QUEUE: !Ref MessageQueue
      DeadLetterQueue:
        Type: SQS
        TargetArn: 
          Fn::GetAtt: MessageDeadLetterQueue.Arn

  SimulateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WorldQuant-Brain-Simulate-Function
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: simulate/
      MemorySize: 128
      Timeout: 900
      Role: !GetAtt IamRole.Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
          QUEUE: !Ref MessageQueue
      Events:
        Event:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 10


  # =========================================================================================
  # AWS LAMBDA FUNCTIONS
  # ========================================================================================= 
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WorldQuant-Brain-Queue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: 
          Fn::GetAtt: MessageDeadLetterQueue.Arn
        maxReceiveCount: 10
  MessageDeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WorldQuant-Brain-Dead-Letter-Queue
      MessageRetentionPeriod: 1209600

  # =========================================================================================
  # AWS CLOUDWATCH ALARM
  # =========================================================================================
  AuthErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
      AlarmActions: 
        - !GetAtt Topic.TopicArn
  AuthDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthFunction
      EvaluationPeriods: 1
      MetricName: Duration
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 750000
      AlarmActions:
        - !GetAtt Topic.TopicArn
  AuthThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !GetAtt Topic.TopicArn

  SimulateErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SimulateFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
      AlarmActions: 
        - !GetAtt Topic.TopicArn
  SimulateDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SimulateFunction
      EvaluationPeriods: 1
      MetricName: Duration
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 750000
      AlarmActions:
        - !GetAtt Topic.TopicArn
  SimulateThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SimulateFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !GetAtt Topic.TopicArn

  # =========================================================================================
  # AWS SNS Topic
  # =========================================================================================
  Topic:
    Type: AWS::SNS::Topic
    Properties: 
      FifoTopic: false
      Subscription: 
        - Endpoint: anzhemeng@gmail.com
          Protocol: email
      TopicName: WorldQuant-Brain-Topic